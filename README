pytest-capturelog
=================

py.test plugin to capture log messages

Usage
-----

Log messages are captured by default and for each failed test will be
shown in the same manner as captured stdout and stderr.

Running without options::

    py.test test_capturelog.py

Shows failed tests like so::

    -------------------------- Captured log ---------------------------
    test_capturelog.py          26 INFO     text going to logger
    ------------------------- Captured stdout -------------------------
    text going to stdout
    ------------------------- Captured stderr -------------------------
    text going to stderr
    ==================== 2 failed in 0.02 seconds =====================

By default each captured log message shows the module, line number,
log level and message.  Showing the exact module and line number is
useful for testing and debugging.  If desired the log format and date
format can be specified to anything that the logging module supports.

Running pytest specifying formatting options::

    py.test --log-format="%(asctime)s %(levelname)s %(message)s" --log-date-format="%Y-%m-%d %H:%M:%S" test_capturelog.py

Shows failed tests like so::

    -------------------------- Captured log ---------------------------
    2010-04-10 14:48:44 INFO text going to logger
    ------------------------- Captured stdout -------------------------
    text going to stdout
    ------------------------- Captured stderr -------------------------
    text going to stderr
    ==================== 2 failed in 0.02 seconds =====================

Further it is possible to disable capturing of logs completely with::

    py.test --nocapturelog test_capturelog.py

Shows failed tests in the normal manner as no logs were captured::

    ------------------------- Captured stdout -------------------------
    text going to stdout
    ------------------------- Captured stderr -------------------------
    text going to stderr
    ==================== 2 failed in 0.02 seconds =====================

Inside tests it is possible to change the loglevel for the captured
log messages.  This is supported by the ``capturelog`` funcarg::

    def test_foo(capturelog):
        capturelog.setLevel(logging.INFO)
        pass

It is also possible to use the capturelog as a context manager to
temporarily change the log level::

    def test_bar(capturelog):
        with capturelog(logging.INFO):
            pass

Lastly the LogRecord instances sent to the logger during the test run
are also available on the function argument.  This is useful for when
you want to assert on the contents of a message::

    def test_baz(capturelog):
        func_under_test()
        for record in capturelog.raw_records:
            assert record.levelname != 'CRITICAL'

For all the available attributes of the log records see the
``logging.LogRecord`` class.

Installation
------------

With pip::

    pip install pytest-capturelog

With easy install::

    easy_install pytest-capturelog
